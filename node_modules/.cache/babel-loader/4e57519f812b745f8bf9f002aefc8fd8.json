{"ast":null,"code":"var _jsxFileName = \"/Users/yagmyrov/Dev/web-batborek/travelio/src/context/core.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\nfunction UserContextProvider(props) {\n  _s();\n\n  const [todayCase, setTodayCase] = useState(\"\");\n  const [cities, setCities] = useState([]);\n  var cityNames = [];\n  const [city, setCity] = useState(\"\");\n  const [hotels, setHotels] = useState([]);\n  const [country, setCountry] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const SearchCovid = () => {\n    // GET request using fetch with error handling\n    fetch(\"https://corona.lmao.ninja/v2/countries/\".concat(country + \"?yesterday=true\")).then(async response => {\n      const data = await response.json();\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      setTodayCase(data.todayCases);\n      searchCity();\n    }).catch(error => {\n      setError(error.toString());\n      console.error(\"There was an error!\", error);\n    });\n  };\n\n  const handleChange = e => {\n    setCountry(e.value);\n  };\n\n  const searchCity = () => {\n    fetch(\"https://hotels4.p.rapidapi.com/locations/search?query=\".concat(country), {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-key\": \"61a532192dmshe4a97d8c6f89d54p10fee6jsn704ac1d1b9ac\",\n        \"x-rapidapi-host\": \"hotels4.p.rapidapi.com\"\n      }\n    }).then(async response => {\n      const data = await response.json();\n      setCities(data.suggestions[0].entities);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const searchHotel = () => {\n    fetch(\"https://hotels4.p.rapidapi.com/locations/search?query=\".concat(city), {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-key\": \"61a532192dmshe4a97d8c6f89d54p10fee6jsn704ac1d1b9ac\",\n        \"x-rapidapi-host\": \"hotels4.p.rapidapi.com\"\n      }\n    }).then(async response => {\n      const data = await response.json();\n      setHotels(data.suggestions[1].entities);\n      hotels.map((hotel, index) => {\n        console.log(index, hotel.name);\n      });\n      searchWeather();\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const searchWeather = () => {\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city + \"&units=metric&appid=43b811164160ccdbae3ecc18fe414287\"), {\n      method: \"GET\"\n    }).then(async response => {\n      const data = await response.json();\n      setWeather(data.main.temp);\n      console.log(weather);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const handleCity = index => {\n    setCity(cities[index].name);\n    console.log(city);\n  };\n\n  const value = {\n    todayCase,\n    setTodayCase,\n    cities,\n    setCities,\n    city,\n    setCity,\n    hotels,\n    setHotels,\n    country,\n    setCountry,\n    cityNames,\n    error,\n    setError,\n    weather,\n    setWeather,\n    SearchCovid,\n    handleChange,\n    searchCity,\n    searchHotel,\n    searchWeather,\n    handleCity\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserContextProvider, \"cJ1nvh/zu9qYOu7LiPeTSVD6ADA=\");\n\n_c = UserContextProvider;\nexport default UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"sources":["/Users/yagmyrov/Dev/web-batborek/travelio/src/context/core.js"],"names":["React","useState","createContext","UserContext","UserContextProvider","props","todayCase","setTodayCase","cities","setCities","cityNames","city","setCity","hotels","setHotels","country","setCountry","error","setError","weather","setWeather","currentPage","setCurrentPage","SearchCovid","fetch","concat","then","response","data","json","ok","message","statusText","Promise","reject","todayCases","searchCity","catch","toString","console","handleChange","e","value","method","headers","suggestions","entities","err","searchHotel","map","hotel","index","log","name","searchWeather","main","temp","handleCity","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from \"react\";\nexport const UserContext = createContext();\n\n\nfunction UserContextProvider(props) {\n  const [todayCase, setTodayCase] = useState(\"\");\n  const [cities, setCities] = useState([]);\n  var cityNames = [];\n  const [city, setCity] = useState(\"\");\n  const [hotels, setHotels] = useState([]);\n  const [country, setCountry] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n\n\n\n  const SearchCovid = () => {\n    // GET request using fetch with error handling\n    fetch(\n      \"https://corona.lmao.ninja/v2/countries/\".concat(\n        country + \"?yesterday=true\"\n      )\n    )\n      .then(async (response) => {\n        const data = await response.json();\n\n        if (!response.ok) {\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n        }\n\n        setTodayCase(data.todayCases);\n        searchCity();\n      })\n      .catch((error) => {\n        setError(error.toString());\n        console.error(\"There was an error!\", error);\n      });\n  };\n\n\n\n  const handleChange = (e) => {\n    setCountry(e.value);\n  };\n\n  const searchCity = () => {\n    fetch(\n      \"https://hotels4.p.rapidapi.com/locations/search?query=\".concat(country),\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-key\":\n            \"61a532192dmshe4a97d8c6f89d54p10fee6jsn704ac1d1b9ac\",\n          \"x-rapidapi-host\": \"hotels4.p.rapidapi.com\",\n        },\n      }\n    )\n      .then(async (response) => {\n        const data = await response.json();\n        setCities(data.suggestions[0].entities);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const searchHotel = () => {\n    fetch(\n      \"https://hotels4.p.rapidapi.com/locations/search?query=\".concat(city),\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-key\":\n            \"61a532192dmshe4a97d8c6f89d54p10fee6jsn704ac1d1b9ac\",\n          \"x-rapidapi-host\": \"hotels4.p.rapidapi.com\",\n        },\n      }\n    )\n      .then(async (response) => {\n        const data = await response.json();\n        setHotels(data.suggestions[1].entities);\n        hotels.map((hotel, index) => {\n          console.log(index, hotel.name);\n        });\n        searchWeather();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const searchWeather = () => {\n    fetch(\n      \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(\n        city + \"&units=metric&appid=43b811164160ccdbae3ecc18fe414287\"\n      ),\n      {\n        method: \"GET\",\n      }\n    )\n      .then(async (response) => {\n        const data = await response.json();\n        setWeather(data.main.temp);\n        console.log(weather);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const handleCity = (index) => {\n    setCity(cities[index].name);\n    console.log(city);\n  };\n\n\n  const value = {\n   \n    todayCase,\n    setTodayCase,\n    cities,\n    setCities,\n    city,\n    setCity,\n    hotels,\n    setHotels,\n    country,\n    setCountry,\n    cityNames,\n    error,\n    setError,\n    weather,\n    setWeather,\n    SearchCovid,\n    handleChange,\n    searchCity,\n    searchHotel,\n    searchWeather,\n    handleCity,\n\n  };\n  return (\n    <UserContext.Provider value={value}>{props.children}</UserContext.Provider>\n  );\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}